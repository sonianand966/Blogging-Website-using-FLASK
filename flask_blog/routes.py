from flask_blog.models import User , Postfrom flask import render_template , flash , redirect , url_forfrom flask_blog.forms import LoginForm , RegistrationForm, UpdateAccountForm, PostFormfrom flask_blog import appfrom flask_blog import db , bcrfrom flask_login import login_user, logout_user, current_user, login_requiredfrom flask import request , abortimport secrets , osfrom PIL import Image#flask_login is an extension having many features like login_user , current_user etc...........#now these classes define below are the tables in our database db#note that their attributes or columns are defined as their objects#render_template package is used for rendering (bringing diff modules here)#NOTE :#its important to keep the name of the folder as templates for rendering any module@app.route('/')#creating routes, mention URL address after -"localhost.portno"@app.route('/home')def home():    dummy = Post.query.all()    return render_template('home.html' , variable = dummy , title = "homepage")#name of function returning html code should be kept same as name of extra URL part#creating another route for understanding better@app.route('/about')def about():    return render_template('about.html')@app.route('/register' , methods = ['GET' , 'POST'])def register():    if current_user.is_authenticated:        return redirect(url_for('home'))    form = RegistrationForm()    if(form.validate_on_submit()) :        hashed_pw = bcr.generate_password_hash(form.password.data).decode('utf-8')        #storing hashed_pw as a string that's why .decode('utf-8') is used        user = User(username = form.username.data, email = form.email.data, password = hashed_pw)        db.session.add(user)        db.session.commit()        flash(f"Your Account has been created for! You can now log in" , 'success')        return redirect(url_for('login'))    return render_template('register.html' , title = 'register',  form = form)@app.route('/login' , methods = ['GET' , 'POST'])def login():    if current_user.is_authenticated:        return redirect(url_for('home'))    form = LoginForm()    if(form.validate_on_submit()):        #logging in the user on basis of their email,now where does user exist?        #IN THE User TABLE, so call a query to check whether table contains such entry or not        temporary_user = User.query.filter_by(email = form.email.data).first()        if temporary_user:            #now it sure that user exists in the database, now check whether password he entered is correct or not            if bcr.check_password_hash(temporary_user.password, form.password.data):                #now log in the user                login_user(temporary_user, remember = form.remember.data)                next_page = request.args.get('next')                if next_page:                    return redirect(next_page)                return redirect(url_for('home'))        else:            flash(f"Incorrect Password / Email , Login Unsuccessful" , 'danger')    return render_template('login.html' ,title = 'login',  form = form)@app.route('/refer')def refer():    return render_template('refer.html')#templates folder contains all the html modules to be used in this file@app.route('/logout')def logout():    logout_user()    return redirect(url_for('home'))def save_picture_for_user(picture):    random_hex = secrets.token_hex(8)    _, f_ext = os.path.splitext(picture.filename)    picture_filename = random_hex + f_ext    picture_path = os.path.join(app.root_path , 'static/default_profile_pic', picture_filename)    #random hash for picture_filename    output_size = (125 , 125)    i = Image.open(picture)    i.thumbnail(output_size)    i.save(picture_path)    return picture_filename@app.route('/account' , methods = ['GET' , 'POST'])@login_requireddef account():    form = UpdateAccountForm()    if form.validate_on_submit():        if form.picture.data:            picture_fn = save_picture_for_user(form.picture.data)            current_user.image_file = picture_fn        current_user.username = form.username.data        current_user.email = form.email.data        current_user.picture = form.picture        db.session.commit()        flash(f"Your account has been updated", 'success')        return redirect(url_for('account'))    elif request.method == 'GET':        form.username.data = current_user.username        form.email.data = current_user.email    img_file =url_for('static' , filename = 'default_profile_pic/' + current_user.image_file)    return render_template('account.html' ,title = 'account', image_file = img_file, form = form)@app.route('/new_post' , methods = ['GET' , 'POST'])@login_requireddef new_post():    form = PostForm()    if form.validate_on_submit():        post = Post(title = form.title.data, content = form.content.data, author = current_user)        db.session.add(post)        db.session.commit()        flash('Your post has been created' , 'success')        return redirect(url_for('home'))    return render_template('create_post.html' ,title = 'New Post', form = form, legend = "New Post")@app.route('/post/<int:post_id>')def post(post_id):    #return me a post with this id or return me a 404 page    post = Post.query.get_or_404(post_id)    return render_template('post.html' , title = post.title, post = post)@app.route('/post/<int:post_id>/update', methods = ['GET' , 'POST'])@login_requireddef update_post(post_id):    post = Post.query.get_or_404(post_id)    if post.author != current_user:        #abort manually        #403 response for a forbidden request        abort(403)    form = PostForm()    if form.validate_on_submit():        post.title = form.title.data        post.content = form.content.data        db.session.commit()        flash('Your changes have been saved! Post Updated', 'success')        return redirect(url_for('post', post_id=post.id))    elif request.method == 'GET':        form.title.data = post.title        form.content.data = post.content    return render_template('create_post.html' , title = 'Update Post' , form = form, legend = "Update Post")@app.route('/post/<int:post_id>/delete', methods = ['POST'])@login_requireddef delete_post(post_id):    post = Post.query.get_or_404(post_id)    if post.author != current_user:        abort(403)    db.session.delete(post)    db.session.commit()    flash('Your post has been deleted!', 'success')    return redirect(url_for('home'))